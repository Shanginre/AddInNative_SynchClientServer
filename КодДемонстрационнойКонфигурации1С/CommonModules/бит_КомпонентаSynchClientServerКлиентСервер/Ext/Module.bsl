
Процедура ЗапуститьСервер() Экспорт
		
	ПараметрыСервера = ИнициализироватьСервер();	
	Если ПараметрыСервера = Неопределено Тогда
		ТекстОшибки = "Сервер не может быть запущен. Параметры сервера не определены";
		бит_КомпонентаSynchClientServerСервер.ДобавитьЗаписьЛога(ТекстОшибки, "ERROR");
		
		Возврат;
	КонецЕсли;
	
	ЗапуститьЦиклОбработкиСообщенийСервера(ПараметрыСервера.КомпонентаСервер, ПараметрыСервера.ПараметрыРаботыСервера);		
	
КонецПроцедуры

Процедура ЗапуститьЦиклОбработкиСообщенийСервера(КомпонентаСервер, ПараметрыРаботыСервера)
	
	ЧастотаОбновленияСлужебнойИнформацииВБазе_сек = 10;
	ПоследнееОбновлениеСлужебнойИнформацииВБазе = ТекущаяДата();	
	
	ВходящиеСообщенияJson = "";		
	ЧастотаПроверки_мс = 1000;
	Таймаут_мс = 10000;
	Пока КомпонентаСервер.GetMessagesFromClientsWhenArrive(ВходящиеСообщенияJson, ЧастотаПроверки_мс, Таймаут_мс) Цикл
		Если ЗначениеЗаполнено(ВходящиеСообщенияJson) Тогда
			ВходящиеСообщенияСтруктура = ПрочитатьСтрокуJsonВСтруктуру(ВходящиеСообщенияJson, Истина);
			ВходящиеСообщенияJson = "";
			
			Если ЗначениеЗаполнено(ВходящиеСообщенияСтруктура) Тогда 			
				ПодтвердитьПолучениеСообщений(КомпонентаСервер, ВходящиеСообщенияСтруктура);
				
				ОбработатьВходящиеСообщения(
					КомпонентаСервер, 
					ВходящиеСообщенияСтруктура, 
					ПараметрыРаботыСервера
				);
			КонецЕсли;
									
		КонецЕсли;
		
		Если ТекущаяДата() - ПоследнееОбновлениеСлужебнойИнформацииВБазе > ЧастотаОбновленияСлужебнойИнформацииВБазе_сек Тогда 
			ПоследнееОбновлениеСлужебнойИнформацииВБазе = ТекущаяДата();
			бит_КомпонентаSynchClientServerСервер.ОбновитьИнформациюСостоянияСокетовВБазеДанных(КомпонентаСервер);		
			бит_КомпонентаSynchClientServerСервер.СохранитьЛогиСервераВБазу(КомпонентаСервер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьСервер() Экспорт
	
	// Получаем параметры запуска внешней компоненты
	ПараметрыРаботыСервера = бит_КомпонентаSynchClientServerСервер.ПолучитьПараметрыРаботыСервера();	
	Если ПараметрыРаботыСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КомпонентаСервер = ИнициализироватьКомпонентуСервера(ПараметрыРаботыСервера.ПараметрыКомпонентыСервера);
	ЕстьОшибки = НачатьПрослушкуПортов(КомпонентаСервер);	
	Если ЕстьОшибки Тогда		
		ОтправитьСигналОстановаРаботающемуЭкземпляруСерверу(КомпонентаСервер);
		ОписаниеОшибки = "Работающему экземпляру сервера был отправлен сигнал останова. Повторите попытку подключения";
		бит_КомпонентаSynchClientServerСервер.ДобавитьЗаписьЛога(ОписаниеОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	бит_КомпонентаSynchClientServerСервер.СброситьТекущееСостояниеОбщенияНаВсехПортах();
	
	Возврат Новый Структура("КомпонентаСервер, ПараметрыРаботыСервера", КомпонентаСервер, ПараметрыРаботыСервера);
	
КонецФункции


#Область РаботаСВнешнимиКомпонентами

Функция ПолучитьКомпонентуНаСервере()	
	
	Компонента = Неопределено;
	Если Не ИнициализироватьВнешнююКомпоненту(Компонента) Тогда		
		ПодключитьКомпонентуНаСервере();
		ИнициализироватьВнешнююКомпоненту(Компонента);	
	КонецЕсли;
	
	Возврат Компонента;
	
КонецФункции

Функция ИнициализироватьВнешнююКомпоненту(Компонента)	
	
	Попытка
		Компонента  = Новый("AddIn.BIT_EXT.SynchClientServer");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПодключитьКомпонентуНаСервере(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = бит_КомпонентаSynchClientServerСервер.ПолучитьАдресМакетаКомпоненты();
	#Если НаКлиенте Тогда
	УстановитьВнешнююКомпоненту(АдресВоВременномХранилище);
	#КонецЕсли
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
		АдресВоВременномХранилище,
		"BIT_EXT",
		ТипВнешнейКомпоненты.Native
	);
			
	Если КомпонентаПодключена Тогда		
		Сообщить(НСтр("ru = 'Компонента подключена!'"));
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервером

Функция НачатьПрослушкуПортов(КомпонентаСервер)
	// создаем сокеты на портах и начинаем слушать
	РезультатJson = КомпонентаСервер.Listen();
	РезультатСтруктура = ПрочитатьСтрокуJsonВСтруктуру(РезультатJson);
	
	ЕстьОшибки = Ложь;
	Если РезультатСтруктура.successfully Тогда
		бит_КомпонентаSynchClientServerСервер.ДобавитьЗаписьЛога("Сервер успешно запущен и выполняет прослушку портов");			
	Иначе		
		ОписаниеОшибки = СтрШаблон("Ошибка запуска компоненты сервера: %1", РезультатСтруктура.errorDescription);
		бит_КомпонентаSynchClientServerСервер.ДобавитьЗаписьЛога(ОписаниеОшибки, "ERROR");
		
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ИнициализироватьКомпонентуСервера(ПараметрыКомпонентыСервера)
	
	// Инициализация внешней компоненты
	КомпонентаСервер = ПолучитьКомпонентуНаСервере();
		
	// Передаем в компоненту параметра работы сервера
	ПараметрыКомпонентыСервераJson = СформироватьЗаписьJSON(ПараметрыКомпонентыСервера);
	КомпонентаСервер.SetServerParameters(ПараметрыКомпонентыСервераJson);
	
	Возврат КомпонентаСервер;
	
КонецФункции

Функция ОтправитьСигналОстановаРаботающемуЭкземпляруСерверу(КомпонентаСервер)
	
	КомпонентаСервер.SendTerminationSignalToRunningInstanceOfServer();
	
КонецФункции

#КонецОбласти

#Область РаботаСВходящимиСообщениями

Функция ОбработатьНовыеСообщения(КомпонентаСервер, ПараметрыРаботыСервера) Экспорт
	
	ВходящиеСообщенияJson = "";
	КомпонентаСервер.GetMessagesFromClients(ВходящиеСообщенияJson);
	Если ЗначениеЗаполнено(ВходящиеСообщенияJson) Тогда
		ВходящиеСообщенияСтруктура = ПрочитатьСтрокуJsonВСтруктуру(ВходящиеСообщенияJson, Истина);
		
		Если ЗначениеЗаполнено(ВходящиеСообщенияСтруктура) Тогда 			
			ПодтвердитьПолучениеСообщений(КомпонентаСервер, ВходящиеСообщенияСтруктура);
			
			ОбработатьВходящиеСообщения(
				КомпонентаСервер, 
				ВходящиеСообщенияСтруктура, 
				ПараметрыРаботыСервера
			);
		КонецЕсли;
	КонецЕсли;
	ВходящиеСообщенияJson = "";
	
КонецФункции

Процедура ПодтвердитьПолучениеСообщений(КомпонентаСервер, ВходящиеСообщенияСтруктура)
	
	МассивНомеровСообщений = ПолучитьМассивНомеровПринятыхСообщений(ВходящиеСообщенияСтруктура);		
	КомпонентаСервер.AckMessagesReceipt(СформироватьЗаписьJSON(МассивНомеровСообщений));
	
КонецПроцедуры

Функция ПолучитьМассивНомеровПринятыхСообщений(ВходящиеСообщенияСтруктура)
	
	МассивНомеров = Новый Массив;
	Для Каждого Сообщение Из ВходящиеСообщенияСтруктура.incomingMessages Цикл
		МассивНомеров.Добавить(Новый Структура("messageUuidString", Сообщение.messageUuidString));	
	КонецЦикла;
	
	Возврат Новый Структура("ackMessagesUuid", МассивНомеров); 
	
КонецФункции

Процедура ОбработатьВходящиеСообщения(КомпонентаСервер, ВходящиеСообщенияСтруктура, ПараметрыРаботыСервера)
	
	Для Каждого Сообщение Из ВходящиеСообщенияСтруктура.incomingMessages Цикл	
		ОбработатьСообщение(КомпонентаСервер, Сообщение, ПараметрыРаботыСервера);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСообщение(КомпонентаСервер, Сообщение, ПараметрыРаботыСервера)
	
	КодаУправляющихСимволовЮникодВЗначение(Сообщение.messageBody);
	бит_КомпонентаSynchClientServerЛокализацияКлиентСервер.ОбработатьСообщение(КомпонентаСервер, Сообщение, ПараметрыРаботыСервера);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСИсходящимиСообщениями

Функция ПолучитьСтруктуруДанныхСообщения(Сообщение) Экспорт	
	
	// Инкапсулируем поля и методы компоненты
	// для использования в модуле локализации	
	Возврат Новый Структура("IDСообщения,НомерПорта,IDСокета,Содержание",
							Сообщение.messageUuidString,
							Сообщение.portNumber,
							Сообщение.clientSocketUuidString,
							Сообщение.messageBody);
	
КонецФункции

Функция СформироватьНовоеСообщениеJson(IDСокета, НомерПорта, Содержание) Экспорт
	
	СообщениеСтруктура = Новый Структура("messageUuidString,portNumber,clientSocketUuidString,messageBody",
										Строка(Новый УникальныйИдентификатор),
										НомерПорта,
										IDСокета,
										Содержание);
	СообщениеJson = СформироватьЗаписьJSON(СообщениеСтруктура);
	СообщениеJson = СтрЗаменить(СообщениеJson, "\\", "\");
	
	Возврат СообщениеJson;
	
КонецФункции

Процедура ОтправитьСообщение(КомпонентаСервер, СообщениеJson) Экспорт
	
	// Инкапсулируем поля и методы компоненты
	// для использования в модуле локализации	
	КомпонентаСервер.SendMessageToClient(СообщениеJson);	
	
КонецПроцедуры

Процедура ОтправитьСообщениеУдаленномуСерверу(КомпонентаСервер, СообщениеJson) Экспорт
	
	// Инкапсулируем поля и методы компоненты
	// для использования в модуле локализации	
	КомпонентаСервер.SendMessageToRemoteServer(СообщениеJson);	
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция СформироватьЗаписьJSON(СтруктураДанных)	
	
	ВозвращаемоеЗначение = Неопределено;	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру = Ложь;		
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON;		
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);	
		ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, Новый НастройкиСериализацииJSON);	
		ВозвращаемоеЗначение = ЗаписьJSON.Закрыть();
	Исключение
		// обработка ошибки
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПрочитатьСтрокуJsonВСтруктуру(СтрокаJSON, ЭкранироватьСимволыUnicode=Ложь, ИменаСвойствДата=Неопределено) Экспорт
	
	//Экранируем запрещенные символы unicode в разделах messageBody
	Если ЭкранироватьСимволыUnicode Тогда
		// Экранируем символы, которые могут содержаться в разделе messageBody
		ЭкранироватьКодаУправляющихСимволовЮникод(СтрокаJSON);		
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Попытка
		Если ИменаСвойствДата = Неопределено Тогда
			Возврат ПрочитатьJSON(Чтение);		
		Иначе
			Возврат ПрочитатьJSON(Чтение,,ИменаСвойствДата,ФорматДатыJSON.ISO);
		КонецЕсли;
	Исключение
		Возврат Неопределено
	КонецПопытки;
	
КонецФункции

Функция ЭкранироватьКодаУправляющихСимволовЮникод(Строка)
	Строка = СтрЗаменить(Строка, "\r", "\\r");
	Строка = СтрЗаменить(Строка, "\u", "\\u");	
КонецФункции

Функция КодаУправляющихСимволовЮникодВЗначение(Строка)
	
	Строка = СтрЗаменить(Строка, "\r", 		Символы.ПС); 	// Carriage Return (13)
	Строка = СтрЗаменить(Строка, "\u000B", 	Символы.ВТаб); 	// Vertical Tab    (11)
	Строка = СтрЗаменить(Строка, "\u001C", 	Символ(28)); 	// File Separator  (28)
	Строка = СтрЗаменить(Строка, "\u0002", 	""); 			// STX			   (2)
	Строка = СтрЗаменить(Строка, "\u0003", 	Символ(3)); 	// ETX			   (3)
	Строка = СтрЗаменить(Строка, "\u0017",  Символ(23)); 	// ETB			   (23)
	Строка = СтрЗаменить(Строка, "\u0004", 	Символ(4)); 	// EOT			   (4)
	Строка = СтрЗаменить(Строка, "\u0005", 	Символ(5)); 	// ENQ 			   (5)
	Строка = СтрЗаменить(Строка, "\u0006", 	Символ(6)); 	// ACK 			   (6)
	Строка = СтрЗаменить(Строка, "\u0015", 	Символ(21)); 	// NAK 			   (21)
	
КонецФункции

#КонецОбласти
