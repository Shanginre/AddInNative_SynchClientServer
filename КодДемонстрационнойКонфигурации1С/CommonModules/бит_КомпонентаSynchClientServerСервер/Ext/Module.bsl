
Процедура ЗапуститьСерверВФоновомЗадании() Экспорт
	
	ИмяМетода = ИмяФоновогоЗаданияСервер();
	
	ПараметрыОтбора = Новый Структура("ИмяМетода, Состояние", ИмяМетода, СостояниеФоновогоЗадания.Активно);	
	СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
	Если НЕ ЗначениеЗаполнено(СписокФоновыхЗаданий) Тогда
		Попытка
			ФоновыеЗадания.Выполнить(ИмяМетода,,ИмяМетода);
			ДобавитьЗаписьЛога("Фоновое задание внешней компоненты синхронного сервера запущено");
		Исключение
			ДобавитьЗаписьЛога(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьФоновоеЗаданиеСервера() Экспорт
	
	ИмяМетода = ИмяФоновогоЗаданияСервер();
	
	ПараметрыОтбора = Новый Структура("ИмяМетода, Состояние", ИмяМетода, СостояниеФоновогоЗадания.Активно);	
	СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);	
	Для Каждого Задание Из СписокФоновыхЗаданий Цикл 
		Попытка
			Задание.Отменить();
			ДобавитьЗаписьЛога("Фоновое задание внешней компоненты синхронного сервера было удалено");
		Исключение
			ДобавитьЗаписьЛога(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;			
	КонецЦикла;	
		
КонецПроцедуры

#Область РаботаСВнешнимиКомпонентами

Функция ПолучитьАдресМакетаКомпоненты()	Экспорт
	
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("бит_КомпонентаSynchClientServer");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, Новый УникальныйИдентификатор);	
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

#КонецОбласти

#Область РаботаССервером

Функция ПолучитьПараметрыРаботыСервера() Экспорт	
			
	ПараметрыКомпонентыСервера = Новый Структура(
		"ip,loggingRequired,logFileName,memoryCleaningFrequency,serverTerminationSignal,ports",
		Константы.бит_IPАдресКомпонентыСервера.Получить(),
		Константы.бит_ЛогироватьРаботуКомпонентыСервера.Получить(),
		Константы.бит_АдресФайлаЛоговКомпонентыСервера.Получить(),
		5000,
		"please stop it",
		ПолучитьМассивНастроекПортовСервера()
	);	
	
	ПараметрыРаботыСервера = Новый Структура(
		"ПараметрыКомпонентыСервера", 
		ПараметрыКомпонентыСервера
	);
	
	Возврат ПараметрыРаботыСервера;
	
КонецФункции

Функция ПолучитьМассивНастроекПортовСервера()
	
	МассивНастроекПортов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ПараметрыКомпонентыСервера.Порт КАК Порт,
		|	бит_ПараметрыКомпонентыСервера.ТипПорта КАК ТипПорта,
		|	бит_ПараметрыКомпонентыСервера.ЭкземплярАнализатора КАК ЭкземплярАнализатора,
		|	бит_ПараметрыКомпонентыСервера.ЗадержкаЧтенияИзСокета КАК ЗадержкаЧтенияИзСокета,
		|	бит_ПараметрыКомпонентыСервера.ЗадержкаОтветаКлиенту КАК ЗадержкаОтветаКлиенту,
		|	бит_ПараметрыКомпонентыСервера.ДопустимоеВремяБезАктивности КАК ДопустимоеВремяБезАктивности,
		|	бит_ПараметрыКомпонентыСервера.СвязьСУдаленнымСервером КАК СвязьСУдаленнымСервером,
		|	бит_ПараметрыКомпонентыСервера.АдресУдаленногоСервера КАК АдресУдаленногоСервера
		|ИЗ
		|	РегистрСведений.бит_ПараметрыКомпонентыСервера КАК бит_ПараметрыКомпонентыСервера
		|ГДЕ
		|	бит_ПараметрыКомпонентыСервера.Использовать";	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПараметрыПортов = РезультатЗапроса.Выбрать();		
	Пока ВыборкаПараметрыПортов.Следующий() Цикл
		МассивНастроекПортов.Добавить(
			Новый Структура(
				"portType,portNumber,isLinkToRemoteServer,remoteIP,delayReadingFromSocket,delayMessageSending,allowedTimeNoActivity",
				Строка(ВыборкаПараметрыПортов.ТипПорта),
				ВыборкаПараметрыПортов.Порт,
				ВыборкаПараметрыПортов.СвязьСУдаленнымСервером,
				ВыборкаПараметрыПортов.АдресУдаленногоСервера,
				ВыборкаПараметрыПортов.ЗадержкаЧтенияИзСокета,
				ВыборкаПараметрыПортов.ЗадержкаОтветаКлиенту,
				ВыборкаПараметрыПортов.ДопустимоеВремяБезАктивности
			)
		); 
	КонецЦикла;
	
	Возврат МассивНастроекПортов;
	
КонецФункции

#КонецОбласти


#Область ПрочиеПроцедурыИФункции

Функция ИмяФоновогоЗаданияСервер()
	Возврат "бит_КомпонентаSynchClientServerКлиентСервер.ЗапуститьСервер";	
КонецФункции

#КонецОбласти

#Область РаботаСБазойДанных

Процедура ОбновитьИнформациюСостоянияСокетовВБазеДанных(КомпонентаСервер) Экспорт
		
	СостояниеJsonСтрока = КомпонентаСервер.GetClientsState();
	СостояниеСтруктура = бит_КомпонентаSynchClientServerКлиентСервер.ПрочитатьСтрокуJsonВСтруктуру(СостояниеJsonСтрока,,"lastActivityTime");
	
	Если СостояниеСтруктура = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Порт");
	ТаблицаСостояний.Колонки.Добавить("ПоследняяАктивность");
	ТаблицаСостояний.Колонки.Добавить("КоличествоПодключенныхКлиентов");
	
	ВремяПоследнейАктивностиНаПорте = Новый Соответствие;
	
	Для Каждого Состояние ИЗ СостояниеСтруктура.clientsConnections Цикл 
		НовСтрока = ТаблицаСостояний.Добавить();
		НовСтрока.Порт = Состояние.portNumber;
		НовСтрока.ПоследняяАктивность = Состояние.lastActivityTime;
		НовСтрока.КоличествоПодключенныхКлиентов = ?(Состояние.accepted, 1, 0);
	КонецЦикла;
	
	ТаблицаВремяПоследнейАктивности = ТаблицаСостояний.Скопировать(,"Порт,ПоследняяАктивность");	
	ТаблицаСостояний.Свернуть("Порт", "КоличествоПодключенныхКлиентов"); 	
	
	ПараметрыКомпонентыСервераНаборЗаписей = РегистрыСведений.бит_ПараметрыКомпонентыСервера.СоздатьНаборЗаписей();
	ПараметрыКомпонентыСервераНаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьПараметрыПорта ИЗ ПараметрыКомпонентыСервераНаборЗаписей Цикл 	
		КоличествоПодключенныхКлиентов = 0;
		МассивНайденныхСтрок = ТаблицаСостояний.НайтиСтроки(Новый Структура("Порт", ЗаписьПараметрыПорта.Порт));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			СтрокаСостояние = МассивНайденныхСтрок[0];
			КоличествоПодключенныхКлиентов = СтрокаСостояние.КоличествоПодключенныхКлиентов;
		КонецЕсли;
		
		ПоследняяАктивность = Дата(1,1,1);
		МассивНайденныхСтрок = ТаблицаВремяПоследнейАктивности.НайтиСтроки(Новый Структура("Порт", ЗаписьПараметрыПорта.Порт));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			Для Каждого СтрокаВремя ИЗ МассивНайденныхСтрок Цикл
				ПоследняяАктивность = Макс(ПоследняяАктивность, СтрокаВремя.ПоследняяАктивность);	
			КонецЦикла;
		КонецЕсли;
		
		ЗаписьПараметрыПорта.ПоследняяАктивность = ПоследняяАктивность;
		ЗаписьПараметрыПорта.КоличествоПодключенныхКлиентов = КоличествоПодключенныхКлиентов;
		ЗаписьПараметрыПорта.ПоследнееОбновлениеСостояния = ТекущаяДата();
	КонецЦикла;
	
	ПараметрыКомпонентыСервераНаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СохранитьЛогиСервераВБазу(КомпонентаСервер) Экспорт
	Если НЕ КомпонентаСервер.loggingRequired Тогда
		Возврат;
	КонецЕсли;	
	
	ЛогиJsonСтрока = КомпонентаСервер.GetLastLogRecords(, Истина);
	ЛогиСтруктура = бит_КомпонентаSynchClientServerКлиентСервер.ПрочитатьСтрокуJsonВСтруктуру(ЛогиJsonСтрока, Истина, "time");
	
	Если ЛогиСтруктура = Неопределено Тогда
		Возврат;	
	КонецЕсли;
											
	Для Каждого Запись ИЗ ЛогиСтруктура.logHistory Цикл		
		ДобавитьЗаписьЛога(
			Запись.body, 
			Запись.type, 
			Запись.logRecordUuidString, 
			Запись.time
		);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаписьЛога(Содержание, ВидЗаписи=Неопределено, УникальныйИдентификаторЗаписи=Неопределено, ВремяЗаписи=Неопределено) Экспорт
	
	Если ВидЗаписи = Неопределено Тогда
		ВидЗаписи = "INFO";	
	КонецЕсли;
	
	Если УникальныйИдентификаторЗаписи = Неопределено Тогда
		УникальныйИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);		
	КонецЕсли;
	
	Если ВремяЗаписи = Неопределено Тогда
		ВремяЗаписи = ТекущаяДата();
	КонецЕсли;	
	
	ERROR = Перечисления.бит_ВидыЛоговКомпонентыСервера.ERROR;	
	INFO = Перечисления.бит_ВидыЛоговКомпонентыСервера.INFO;
	
	НаборЗаписей = РегистрыСведений.бит_ЛогиКомпонентыСервера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификаторЗаписи.Установить(УникальныйИдентификаторЗаписи);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидЗаписи = ?(ВидЗаписи = "ERROR", ERROR, INFO); 
	НоваяЗапись.УникальныйИдентификаторЗаписи = УникальныйИдентификаторЗаписи;
	НоваяЗапись.Содержание = Содержание;
	НоваяЗапись.Время = ВремяЗаписи;
	
	НаборЗаписей.Записать();		
	
КонецПроцедуры

Процедура СброситьТекущееСостояниеОбщенияНаВсехПортах() Экспорт
	
	ПараметрыКомпонентыСервераНаборЗаписей = РегистрыСведений.бит_ПараметрыКомпонентыСервера.СоздатьНаборЗаписей();
	ПараметрыКомпонентыСервераНаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьПараметрыПорта ИЗ ПараметрыКомпонентыСервераНаборЗаписей Цикл
		ЗаписьПараметрыПорта.ТекущееСостояниеОбщения = 0;	
	КонецЦикла;
	
	ПараметрыКомпонентыСервераНаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти






